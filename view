#!/bin/bash
# Author : Mark Wu, http://blog.markplace.net
# License: GPL3, http://www.gnu.org/copyleft/gpl.html
# Credit : Inspired by and based on Paul Mansfield's projectview, http://github.com/the1ts/todo.txt-plugins/blob/master/README.projects

# Stop Verbose lines, thanks to Mark Harrison
TODOTXT_VERBOSE=0

# Get action
action=$1
shift

# Get option
option=$1;
shift

# Get rest of them
term="$@"

function usage() {
    echo "  $(basename $0) [OPTION] [TERM]"
    echo "    Show todo items containing TERM, grouped by OPTION, and displayed in"
    echo "    priority order. If no TERM provided, displays entire todo.txt."
    echo "    OPTION:"
    echo "      project : Show todo items group by project"
    echo "      context : Show todo items group by context"
    echo "      date    : Show todo items group by date"
    echo "      nodate  : Show todo items group by date without date"
    echo "      past    : Show todo items group by date before and with today"
    echo "      future  : Show todo items group by date after and with today"
    echo "      ?length : Show todo items group by date from today to ?length"
    echo "                ? could be sign(+-) or unsign numbers."
    echo "                Length could be (days|weeks|months|years)"
    echo "    Example:"
    echo "      \$ todo.sh $(basename $0) project          # Show todo items grouped by project"
    echo "      \$ todo.sh $(basename $0) project @context # Show todo items grouped by project and filtered by @context"
    echo "      \$ todo.sh $(basename $0) context          # Show todo items grouped by context"
    echo "      \$ todo.sh $(basename $0) date +project    # Show todo items grouped by date and filtered by +project"
    echo "      \$ todo.sh $(basename $0) -3days           # Show todo items grouped by date from today to 3days before today"
    echo "      \$ todo.sh $(basename $0) 4weeks           # Show todo items grouped by date from today to 4weeks after today"
    echo ""
    exit
}

function project_view() {
    # Show projects in alphabetical order and todo items in priority order
    echo "=====  Projects  ====="
    echo ""

    # Find all projects and sort
    PROJECTS=`grep -o '[^  ]*+[^  ]\+' "$TODO_FILE" | grep '^+' | sort -u | sed 's/^+//g'`

    # For each project show header and the list of todo items
    for project in $PROJECTS; do
        # Use core _list function, does numbering and colouring for us
        PROJECT_LIST=`_list "$TODO_FILE" "+$project" "$term" | sed 's/\(^+\|\ *+\)[a-zA-Z0-9\{._\-\}]*\ */ /g'`
        if [[ -n "${PROJECT_LIST}" ]]; then
            echo "---  $project  ---"
            echo "${PROJECT_LIST}"
            echo ""
        fi
    done
    # Show todo items not associated to a project
    PROJECT_LIST=`_list "$TODO_FILE" "$term" | grep -v "+\w"`
    if  [[ -n "${PROJECT_LIST}" ]]; then
        echo "---  Items without project  ---"
        echo "${PROJECT_LIST}"
    fi
}

function context_view() {
    # Show contexts in alphabetical order and todo items in priority order
    echo "=====  Contexts  ====="
    echo ""

    # Find all contexts and sort
    CONTEXTS=`grep -o '[^  ]*@[^  ]\+' "$TODO_FILE" | grep '^@' | sort -u | sed 's/@//g'`

    # For each context show header and the list of todo items
    for context in $CONTEXTS ; do
        # Use core _list function, does numbering and colouring for us
        CONTEXT_LIST=`_list "$TODO_FILE" "@$context" "$term" | sed 's/\(^@\|\ *@\)[^ ]*\ */ /g'`
        if [[ -n "${CONTEXT_LIST}" ]]; then
            echo "---  $context  ---"
            echo "${CONTEXT_LIST}"
            echo ""
        fi
    done
    # Show todo items not associated to a context
    CONTEXT_LIST=`_list "$TODO_FILE" "$term" | grep -v "@[^ ]*\ *"`
    if [[ -n "${CONTEXT_LIST}" ]]; then
        echo "---  Items without context  ---"
        echo "${CONTEXT_LIST}"
    fi
}

function date_view() {
    #  Show dates in alphabetical order and todo items in priority order
    echo "=====  Dates  ====="
    echo ""

    #  Find all dates and sort
    DATES=`grep -o '[^  ]*t:[^  ]\+' "$TODO_FILE" | grep '^t:' | sort -u | sed 's/^t://g'`

    #  Date range
    RANGE=$1
    if [[ ( $RANGE != "date" ) && ( $RANGE != "future") && ( $RANGE != "past" ) ]]; then
        RANGE=`date -d $RANGE +%Y-%m-%d`
        RANGE=`date -d $RANGE +%s`
    fi

    #  Today
    TODAY=`date +%Y-%m-%d`
    TODAY=`date -d $TODAY +%s`

    #  For each date show header and the list of todo items
    for i in $DATES ; do
        # Check the date is before or after
        DATE=`date -d "$i" +%s`
        if [ $RANGE = "future" ]; then
            if [ $DATE -lt $TODAY ]; then
                continue
            fi
        elif [ $RANGE = "past" ]; then
            if [ $DATE -gt $TODAY ]; then
                continue
            fi
        elif [ $RANGE != "date" ]; then
            if [ $RANGE = $TODAY ]; then
                if [ $DATE != $TODAY ]; then
                    continue
                fi
            elif [ $RANGE -gt $TODAY ]; then
                if [[ ( $DATE -lt $TODAY ) || ( $DATE -gt $RANGE ) ]]; then
                    continue
                fi
            elif [ $RANGE -lt $TODAY ]; then
                if [[ ( $DATE -gt $TODAY ) || ( $DATE -lt $RANGE ) ]]; then
                    continue
                fi
            fi
        fi
        #  Use core _list function, does numbering and colouring for us
        DATE_LIST=`_list "$TODO_FILE" "t:$i" "$term" | sed 's/\(^t:\|\ *t:\)[0-9-]*\ */ /g'`
        if [ -n "${DATE_LIST}" ]; then
            echo  "---  $i  ---"
            echo  "${DATE_LIST}"
            echo  ""
        fi
    done
    #  Show todo items not associated to a date
    DATE_LIST=`_list "$TODO_FILE" "$term" | grep -v "t:[0-9-]*"`
    if [ -n "${DATE_LIST}" ]; then
        echo "---  Items without date  ---"
        echo "${DATE_LIST}"
    fi
}

VALID_OPTION=`echo $option | sed -n '/^\(project\|context\|date\|nodate\|future\|past\|today\|tomorrow\|yesterday\|\([+-][0-9]\+\|[0-9]\+\)\(days\|weeks\|months\|years\)\)$/p'`
if [[ -n "$VALID_OPTION" ]]; then
    case $option in
    'project')
        project_view
        ;;
    'context')
        context_view
        ;;
    *)
        date_view $option
        ;;
    esac
else
    usage
fi
